name: Deploy to S3

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_REGION: "us-east-1"

permissions:
  id-token: write
  contents: read

jobs:
  setup-oidc:
    name: Setup OIDC Provider
    runs-on: ubuntu-latest
    outputs:
      oidc_exists: ${{ steps.check-oidc.outputs.oidc_exists }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Configure AWS credentials (Initial Setup)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Check if OIDC Provider Exists
        id: check-oidc
        run: |
          if aws iam list-open-id-connect-providers | grep -q "token.actions.githubusercontent.com"; then
            echo "OIDC provider for GitHub exists"
            echo "oidc_exists=true" >> $GITHUB_OUTPUT
          else
            echo "OIDC provider for GitHub does not exist"
            echo "oidc_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Create OIDC Provider
        if: steps.check-oidc.outputs.oidc_exists == 'false'
        run: |
          aws iam create-open-id-connect-provider \
            --url "https://token.actions.githubusercontent.com" \
            --client-id-list "sts.amazonaws.com"
      - name: Create GitHub Actions Role
        run: |
          if ! aws iam get-role --role-name GitHubActionsRole 2>/dev/null; then
            echo '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Federated":"arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:oidc-provider/token.actions.githubusercontent.com"},"Action":"sts:AssumeRoleWithWebIdentity","Condition":{"StringEquals":{"token.actions.githubusercontent.com:sub":"repo:${{ github.repository }}:ref:refs/heads/main"}}}]}' > trust-policy.json
            aws iam create-role --role-name GitHubActionsRole --assume-role-policy-document file://trust-policy.json
            aws iam attach-role-policy --role-name GitHubActionsRole --policy-arn arn:aws:iam::aws:policy/AdministratorAccess
          else
            echo "GitHubActionsRole already exists"
          fi

  check-bucket:
    name: Check Terraform State Bucket
    needs: setup-oidc
    runs-on: ubuntu-latest
    outputs:
      bucket_exists: ${{ steps.check.outputs.bucket_exists }}
      bucket_name: ${{ steps.check.outputs.bucket_name }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
      - name: Check if bucket exists
        id: check
        run: |
          echo "AWS_ACCOUNT_ID in check-bucket: '${{ secrets.AWS_ACCOUNT_ID }}'"
          BUCKET_NAME="tf-${{ secrets.AWS_ACCOUNT_ID }}"
          echo "Computed BUCKET_NAME: '$BUCKET_NAME'"
          echo "Checking bucket: $BUCKET_NAME"
          if aws s3 ls "s3://$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket $BUCKET_NAME exists"
            echo "bucket_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "Bucket $BUCKET_NAME does not exist"
            echo "bucket_exists=false" >> "$GITHUB_OUTPUT"
          fi
          echo "Setting bucket_name output..."
          echo "bucket_name<<EOF" >> "$GITHUB_OUTPUT"
          echo "$BUCKET_NAME" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "Wrote bucket_name=$BUCKET_NAME to GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"

  bootstrap:
    name: Bootstrap Terraform State Bucket
    needs: [setup-oidc, check-bucket]
    # if: ${{ needs.check-bucket.outputs.bucket_exists == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Tear Down and Bootstrap Terraform State Bucket
        run: |
          mkdir -p bootstrap
          cd bootstrap
          
          # Define bucket name
          BUCKET_NAME="tf-${{ secrets.AWS_ACCOUNT_ID }}"
          
          # Delete existing bucket
          echo "Removing existing bucket $BUCKET_NAME if it exists..."
          if aws s3 ls "s3://$BUCKET_NAME" 2>/dev/null; then
            aws s3 rb "s3://$BUCKET_NAME" --force || { echo "Failed to delete bucket $BUCKET_NAME"; exit 1; }
            
            # Wait until bucket is fully deleted
            echo "Verifying bucket deletion..."
            ATTEMPTS=10
            DELAY=5
            for ((i=1; i<=$ATTEMPTS; i++)); do
              if aws s3 ls "s3://$BUCKET_NAME" 2>/dev/null; then
                echo "Bucket $BUCKET_NAME still exists, waiting $DELAY seconds (attempt $i/$ATTEMPTS)..."
                sleep $DELAY
              else
                echo "Bucket $BUCKET_NAME successfully deleted"
                break
              fi
            done
            if [ $i -gt $ATTEMPTS ]; then
              echo "Error: Bucket $BUCKET_NAME still exists after $ATTEMPTS attempts"
              exit 1
            fi
          else
            echo "Bucket $BUCKET_NAME does not exist, proceeding..."
          fi
          
          # Define bootstrap config
          cat <<EOF > bootstrap.tf
          provider "aws" {
            region = "${{ env.AWS_REGION }}"
          }
          data "aws_caller_identity" "current" {}
          module "tfstate_s3" {
            source     = "../modules/tfstate_s3"
            account_id = data.aws_caller_identity.current.account_id
          }
          EOF
          
          # Clear local Terraform files
          rm -rf .terraform terraform.tfstate*
          
          # Initialize and apply
          terraform init -no-color || { echo "terraform init failed"; exit 1; }
          terraform apply -auto-approve -no-color || { echo "terraform apply failed"; exit 1; }
        env:
          TF_VAR_account_id: ${{ secrets.AWS_ACCOUNT_ID }}

  debug-outputs:
    name: Debug Check-Bucket Outputs
    needs: [check-bucket]
    runs-on: ubuntu-latest
    steps:
      - name: Echo Outputs
        run: |
          echo "Bucket Exists: '${{ needs.check-bucket.outputs.bucket_exists }}'"
          echo "Bucket Name: '${{ needs.check-bucket.outputs.bucket_name }}'"

  apply:
    name: Terraform Apply and Deploy
    needs: [check-bucket, bootstrap]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Run Terraform
        run: |
          echo "Running apply job - v2 - timestamp: $(date +%s)"
          BUCKET_NAME_FROM_OUTPUT="${{ needs.check-bucket.outputs.bucket_name }}"
          echo "Bucket Name from check-bucket: '$BUCKET_NAME_FROM_OUTPUT'"
          echo "AWS_ACCOUNT_ID: '${{ secrets.AWS_ACCOUNT_ID }}'"
          if [ -z "$BUCKET_NAME_FROM_OUTPUT" ]; then
            echo "Error: bucket_name is empty. Falling back to computed value."
            BUCKET_NAME_FALLBACK="tf-${{ secrets.AWS_ACCOUNT_ID }}"
            echo "Using fallback bucket name: '$BUCKET_NAME_FALLBACK'"
          else
            BUCKET_NAME_FALLBACK="$BUCKET_NAME_FROM_OUTPUT"
            echo "Using output bucket name: '$BUCKET_NAME_FALLBACK'"
          fi
          terraform init -no-color -backend-config="bucket=$BUCKET_NAME_FALLBACK" -backend-config="key=state/terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}" || { echo "terraform init failed"; exit 1; }
          terraform apply -auto-approve -no-color -var="account_id=${{ secrets.AWS_ACCOUNT_ID }}" -var="github_repo=${{ github.repository }}"
        env:
          TF_LOG: DEBUG
      - name: Sync files to S3
        run: |
          aws s3 sync ./ s3://${{ secrets.S3_BUCKET }} --delete
      - name: Check CloudFront Distribution Exists
        id: check-cloudfront
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query 'DistributionList.Items[?Origins.Items[0].DomainName==`${{ secrets.S3_BUCKET }}.s3.amazonaws.com`].Id' --output text)
          if [ -n "$DISTRIBUTION_ID" ]; then
            echo "CloudFront distribution found: $DISTRIBUTION_ID"
            echo "CLOUDFRONT_DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV
            echo "distribution_exists=true" >> $GITHUB_OUTPUT
          else
            echo "No CloudFront distribution found for ${{ secrets.S3_BUCKET }}.s3.amazonaws.com"
            echo "distribution_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Invalidate CloudFront Cache
        if: steps.check-cloudfront.outputs.distribution_exists == 'true'
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"