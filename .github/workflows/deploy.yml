name: Deploy to S3

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_REGION: "us-east-1"

permissions:
  id-token: write
  contents: read

jobs:
  check-bucket:
    name: Check Terraform State Bucket
    runs-on: ubuntu-latest
    outputs:
      bucket_exists: ${{ steps.check.outputs.bucket_exists }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if bucket exists
        id: check
        run: |
          BUCKET_NAME="tf-${{ secrets.AWS_ACCOUNT_ID }}"
          if aws s3 ls "s3://$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket $BUCKET_NAME exists"
            echo "bucket_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Bucket $BUCKET_NAME does not exist"
            echo "bucket_exists=false" >> $GITHUB_OUTPUT
          fi
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

  bootstrap:
    name: Bootstrap Terraform State Bucket
    needs: check-bucket
    if: ${{ needs.check-bucket.outputs.bucket_exists == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Bootstrap Terraform State Bucket
        run: |
          cat <<EOF > bootstrap.tf
          provider "aws" {
            region = "us-east-1"
          }
          data "aws_caller_identity" "current" {}
          module "tfstate_s3" {
            source     = "./modules/tfstate_s3"
            account_id = data.aws_caller_identity.current.account_id
          }
          EOF
          terraform init
          terraform apply -auto-approve

  apply:
    name: Terraform Apply and Deploy
    needs: [check-bucket, bootstrap]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Run Terraform
        run: |
          terraform init -backend-config="bucket=${{ env.BUCKET_NAME }}"
          terraform apply -auto-approve -var "github_repo=${{ github.repository }}"

      - name: Sync files to S3
        run: |
          aws s3 sync ./ s3://my-secure-static-site --delete

      - name: Check CloudFront Distribution Exists
        id: check-cloudfront
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query 'DistributionList.Items[?Origins.Items[0].DomainName==`${{ secrets.S3_BUCKET }}.s3.amazonaws.com`].Id' --output text)
          if [ -n "$DISTRIBUTION_ID" ]; then
            echo "CloudFront distribution found: $DISTRIBUTION_ID"
            echo "CLOUDFRONT_DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV
            echo "distribution_exists=true" >> $GITHUB_OUTPUT
          else
            echo "No CloudFront distribution found for ${{ secrets.S3_BUCKET }}.s3.amazonaws.com"
            echo "distribution_exists=false" >> $GITHUB_OUTPUT
          fi
  
      - name: Invalidate CloudFront Cache
        if: steps.check-cloudfront.outputs.distribution_exists == 'true'
        run: |
            aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"