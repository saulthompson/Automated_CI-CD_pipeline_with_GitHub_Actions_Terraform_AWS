- name: Tear Down and Bootstrap Terraform State Bucket and Website Hosting Bucket
  id: check-and-run
  run: |
    BUCKET_NAME="tfs-${{ secrets.AWS_ACCOUNT_ID }}"
    WEBSITE_BUCKET="${{ secrets.S3_BUCKET }}-${{ secrets.AWS_ACCOUNT_ID }}"
    
    if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
      echo "Bucket $BUCKET_NAME exists and is accessible."
    else
      echo "Bucket $BUCKET_NAME does not exist or access denied."
    fi
    
    echo "State bucket $BUCKET_NAME does not exist, running bootstrap..."
    
    # Parameters for retries
    ATTEMPTS=20
    INITIAL_DELAY=5
    log() {
      echo "[INFO] $1"
    }
    warn() {
      echo "[WARN] $1"
    }
    err() {
      echo "[ERROR] $1" >&2
    }
    empty_and_delete_bucket() {
      local bucket="$1"
      log "Checking if bucket '$bucket' exists..."
      if aws s3api head-bucket --bucket "$bucket" 2>/dev/null; then
        log "Bucket '$bucket' found."
        OBJECT_COUNT=$(aws s3api list-objects-v2 --bucket "$bucket" --query 'KeyCount' --output text || echo 0)
        if [ "$OBJECT_COUNT" -gt 0 ]; then
          warn "Bucket '$bucket' has $OBJECT_COUNT objects, emptying..."
          aws s3 rm "s3://$bucket" --recursive || { err "Failed to empty '$bucket'"; exit 1; }
          for ((i=1, delay=$INITIAL_DELAY; i<=$ATTEMPTS; i++, delay*=2)); do
            OBJECT_COUNT=$(aws s3api list-objects-v2 --bucket "$bucket" --query 'KeyCount' --output text || echo 0)
            if [ "$OBJECT_COUNT" -eq 0 ]; then
              log "'$bucket' is now empty."
              break
            fi
            warn "'$bucket' still has $OBJECT_COUNT objects. Retrying in $delay seconds (attempt $i/$ATTEMPTS)..."
            sleep $delay
          done
          if [ "$OBJECT_COUNT" -gt 0 ]; then
            err "Bucket '$bucket' still not empty after $ATTEMPTS attempts."
            exit 1
          fi
        else
          log "Bucket '$bucket' is already empty."
        fi
        log "Deleting bucket '$bucket'..."
        aws s3 rb "s3://$bucket" --force || { err "Failed to delete '$bucket'"; exit 1; }
      else
        warn "Bucket '$bucket' does not exist, skipping deletion."
        return
      fi
      # Confirm deletion
      for ((i=1, delay=$INITIAL_DELAY; i<=$ATTEMPTS; i++, delay*=2)); do
        if aws s3api head-bucket --bucket "$bucket" 2>/dev/null; then
          warn "'$bucket' still exists, retrying deletion check in $delay seconds (attempt $i/$ATTEMPTS)..."
          sleep $delay
        else
          log "'$bucket' successfully deleted."
          return
        fi
      done
      err "'$bucket' still exists after $ATTEMPTS attempts."
      exit 1
    }
    empty_and_delete_bucket "$WEBSITE_BUCKET"
    empty_and_delete_bucket "$BUCKET_NAME"
