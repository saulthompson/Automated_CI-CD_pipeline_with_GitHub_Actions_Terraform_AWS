name: Deploy to S3

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy all resources'
        required: false
        default: 'false'
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  setup:
    uses: ./.github/workflows/setup.yml
    # Outputs aws_region for downstream jobs

  check-bootstrap:
    runs-on: ubuntu-latest
    outputs:
      run_bootstrap: ${{ steps.check-state-bucket.outputs.run }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Configure AWS Credentials (Static)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ needs.setup.outputs.aws_region }}
      - name: Check if Terraform State Bucket exists
        id: check-state-bucket
        run: |
          BUCKET_NAME="tfs-${{ secrets.AWS_ACCOUNT_ID }}"
          if aws s3 ls "s3://$BUCKET_NAME" 2>/dev/null; then
            echo "State bucket $BUCKET_NAME already exists, skipping bootstrap..."
            echo "run=false" >> $GITHUB_OUTPUT
          else
            echo "State bucket $BUCKET_NAME does not exist, running bootstrap..."
            echo "run=true" >> $GITHUB_OUTPUT
          fi

  bootstrap:
    needs: setup
    uses: ./.github/workflows/bootstrap.yml
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
    with:
      aws_region: ${{ needs.setup.outputs.aws_region }}
      github_repo: ${{ github.repository }}

  terraform-prep:
    needs: [setup, bootstrap]
    uses: ./.github/workflows/terraform-prep.yml
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      WEBSITE_USERNAME: ${{ secrets.WEBSITE_USERNAME }}
      WEBSITE_PASSWORD: ${{ secrets.WEBSITE_PASSWORD }}
    with:
      aws_region: ${{ needs.setup.outputs.aws_region }}
      github_repo: ${{ github.repository }}

  lambda-prep:
    needs: [setup, terraform-prep]
    uses: ./.github/workflows/lambda-prep.yml
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      WEBSITE_USERNAME: ${{ secrets.WEBSITE_USERNAME }}
      WEBSITE_PASSWORD: ${{ secrets.WEBSITE_PASSWORD }}
    with:
      aws_region: ${{ needs.setup.outputs.aws_region }}
      github_repo: ${{ github.repository }}

  deploy:
    needs: [setup, terraform-prep, lambda-prep]
    uses: ./.github/workflows/deploy.yml
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      WEBSITE_USERNAME: ${{ secrets.WEBSITE_USERNAME }}
      WEBSITE_PASSWORD: ${{ secrets.WEBSITE_PASSWORD }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
    with:
      aws_region: ${{ needs.setup.outputs.aws_region }}
      github_repo: ${{ github.repository }}

  post-deploy:
    needs: [setup, deploy]
    uses: ./.github/workflows/post-deploy.yml
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
    with:
      aws_region: ${{ needs.setup.outputs.aws_region }}